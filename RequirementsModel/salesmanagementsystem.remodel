UseCaseModel SalesManagementSystem {

	UC::manageOrder "订单信息管理(CRUD)"
	UC::manageContract "合同信息管理(CRUD)"
	UC::manageProduct "产品信息管理(CRUD)"
	UC::manageClient "客户信息管理(CRUD)"
	UC::salesCommissionManagement "销售佣金管理(R&U)"
	UC::salesProcessing "销售过程处理" definedBySSD(SalesProcessingSSD) relatedService(SalesProcessingService)
	UC::salesPlanManagement "销售计划管理" definedBySSD(SalesPlanManagementSSD) relatedService(SalesPlanManagementService)
	UC::deliveryNotification"发货通知" definedBySSD(DeliveryNotificationSSD) relatedService(DeliveryNotificationService)
	UC::exchangeProcessing "退换处理" definedBySSD(ExchangeProcessingSSD) relatedService(ExchangeProcessingService)
	UC::manageItemsPrices "产品报价(R&U)"
	UC::manageInvoice "发票管理(CRUD)"
	UC::postingOfAccount "过账处理"
	UC::tradingTerminationAndSettlement "交易终止结清" definedBySSD(TradingTerminationAndSettlementSSD) relatedService(TradingTerminationAndSettlementService)
	UC::manageDeliveryMethod "交货方式管理(CRUD)"
	UC::manageOrderMethod "订货方式管理(CRUD)"

	Actor SalesStaff("销售职员") {
		salesProcessing
		deliveryNotification
		exchangeProcessing
	}

	Actor FinancialStaff("财务职员") {
		manageItemsPrices
		manageInvoice
		postingOfAccount
		tradingTerminationAndSettlement
	}

	Actor DepartmentManager("部门经理") {
		manageClient
		salesCommissionManagement
		salesPlanManagement
		manageDeliveryMethod
		manageOrderMethod
	}

	Actor Administrator("系统管理员") {
		manageOrder
		manageContract
		manageProduct
	}

	Interaction SalesProcessingSSD {

		[Participants: SalesStaff SalesProcessingService]

		CallMessage::SalesProcessingSSDCallMessage1(makeNewOrder SalesProcessingSSDCallMessage1SendingEnd -> SalesProcessingSSDExecution1StartEnd)
		ReturnMessage::SalesProcessingSSDCallMessage1Return(SalesProcessingSSDExecution1FinishEnd -> SalesProcessingSSDCallMessage1ReturnReceivingEnd SalesProcessingSSDCallMessage1)
		CallMessage::SalesProcessingSSDCallMessage3(addProduct SalesProcessingSSDCallMessage3SendingEnd -> SalesProcessingSSDExecution2StartEnd)
		ReturnMessage::SalesProcessingSSDCallMessage3Return(SalesProcessingSSDExecution2FinishEnd -> SalesProcessingSSDCallMessage3ReturnReceivingEnd SalesProcessingSSDCallMessage3)
		CallMessage::SalesProcessingSSDCallMessage5(generateContract SalesProcessingSSDCallMessage5SendingEnd -> SalesProcessingSSDExecution3StartEnd)
		ReturnMessage::SalesProcessingSSDCallMessage5Return(SalesProcessingSSDExecution3FinishEnd -> SalesProcessingSSDCallMessage5ReturnReceivingEnd SalesProcessingSSDCallMessage5)
		CallMessage::SalesProcessingSSDCallMessage7(authorization SalesProcessingSSDCallMessage7SendingEnd -> SalesProcessingSSDExecution4StartEnd)
		ReturnMessage::SalesProcessingSSDCallMessage7Return(SalesProcessingSSDExecution4FinishEnd -> SalesProcessingSSDCallMessage7ReturnReceivingEnd SalesProcessingSSDCallMessage7)
		CallMessage::SalesProcessingSSDCallMessage9(generateOrder SalesProcessingSSDCallMessage9SendingEnd -> SalesProcessingSSDExecution5StartEnd)
		ReturnMessage::SalesProcessingSSDCallMessage9Return(SalesProcessingSSDExecution5FinishEnd -> SalesProcessingSSDCallMessage9ReturnReceivingEnd SalesProcessingSSDCallMessage9)

		Execution::SalesProcessingSSDExecution1(SalesProcessingService SalesProcessingSSDExecution1StartEnd SalesProcessingSSDExecution1FinishEnd)
		Execution::SalesProcessingSSDExecution2(SalesProcessingService SalesProcessingSSDExecution2StartEnd SalesProcessingSSDExecution2FinishEnd)
		Execution::SalesProcessingSSDExecution3(SalesProcessingService SalesProcessingSSDExecution3StartEnd SalesProcessingSSDExecution3FinishEnd)
		Execution::SalesProcessingSSDExecution4(SalesProcessingService SalesProcessingSSDExecution4StartEnd SalesProcessingSSDExecution4FinishEnd)
		Execution::SalesProcessingSSDExecution5(SalesProcessingService SalesProcessingSSDExecution5StartEnd SalesProcessingSSDExecution5FinishEnd)

		CombinedFragment:: combinedFragement1 -> loop {

			[Participants: SalesProcessingService SalesStaff]

			combinedFragement1StartEnd -> combinedFragement1FinishEnd

			Operand::hasMoreItem(condition1End combinedFragement1FinishEnd)
		}

		MessageEnd::SalesProcessingSSDCallMessage1SendingEnd(SalesStaff SalesProcessingSSDCallMessage1)
		ExecutionEnd::SalesProcessingSSDExecution1StartEnd(SalesProcessingService SalesProcessingSSDExecution1)
		ExecutionEnd::SalesProcessingSSDExecution1FinishEnd(SalesProcessingService SalesProcessingSSDExecution1)
		MessageEnd::SalesProcessingSSDCallMessage1ReturnReceivingEnd(SalesStaff SalesProcessingSSDCallMessage1Return)
		CombinedFragmentEnd::combinedFragement1StartEnd(combinedFragement1)
		OperandEnd::condition1End(hasMoreItem)
		MessageEnd::SalesProcessingSSDCallMessage3SendingEnd(SalesStaff SalesProcessingSSDCallMessage3)
		ExecutionEnd::SalesProcessingSSDExecution2StartEnd(SalesProcessingService SalesProcessingSSDExecution2)
		ExecutionEnd::SalesProcessingSSDExecution2FinishEnd(SalesProcessingService SalesProcessingSSDExecution2)
		MessageEnd::SalesProcessingSSDCallMessage3ReturnReceivingEnd(SalesStaff SalesProcessingSSDCallMessage3Return)
		CombinedFragmentEnd::combinedFragement1FinishEnd(combinedFragement1)
		MessageEnd::SalesProcessingSSDCallMessage5SendingEnd(SalesStaff SalesProcessingSSDCallMessage5)
		ExecutionEnd::SalesProcessingSSDExecution3StartEnd(SalesProcessingService SalesProcessingSSDExecution3)
		ExecutionEnd::SalesProcessingSSDExecution3FinishEnd(SalesProcessingService SalesProcessingSSDExecution3)
		MessageEnd::SalesProcessingSSDCallMessage5ReturnReceivingEnd(SalesStaff SalesProcessingSSDCallMessage5Return)
		MessageEnd::SalesProcessingSSDCallMessage7SendingEnd(SalesStaff SalesProcessingSSDCallMessage7)
		ExecutionEnd::SalesProcessingSSDExecution4StartEnd(SalesProcessingService SalesProcessingSSDExecution4)
		ExecutionEnd::SalesProcessingSSDExecution4FinishEnd(SalesProcessingService SalesProcessingSSDExecution4)
		MessageEnd::SalesProcessingSSDCallMessage7ReturnReceivingEnd(SalesStaff SalesProcessingSSDCallMessage7Return)
		MessageEnd::SalesProcessingSSDCallMessage9SendingEnd(SalesStaff SalesProcessingSSDCallMessage9)
		ExecutionEnd::SalesProcessingSSDExecution5StartEnd(SalesProcessingService SalesProcessingSSDExecution5)
		ExecutionEnd::SalesProcessingSSDExecution5FinishEnd(SalesProcessingService SalesProcessingSSDExecution5)
		MessageEnd::SalesProcessingSSDCallMessage9ReturnReceivingEnd(SalesStaff SalesProcessingSSDCallMessage9Return)

	}

	Interaction DeliveryNotificationSSD {

		[Participants: SalesStaff DeliveryNotificationService]

		CallMessage::DeliveryNotificationSSDCallMessage1(generateBillOfLading DeliveryNotificationSSDCallMessage1SendingEnd -> DeliveryNotificationSSDExecution1StartEnd)
		ReturnMessage::DeliveryNotificationSSDCallMessage1Return(DeliveryNotificationSSDExecution1FinishEnd -> DeliveryNotificationSSDCallMessage1ReturnReceivingEnd DeliveryNotificationSSDCallMessage1)
		CallMessage::DeliveryNotificationSSDCallMessage3(generateNotification DeliveryNotificationSSDCallMessage3SendingEnd -> DeliveryNotificationSSDExecution2StartEnd)
		ReturnMessage::DeliveryNotificationSSDCallMessage3Return(DeliveryNotificationSSDExecution2FinishEnd -> DeliveryNotificationSSDCallMessage3ReturnReceivingEnd DeliveryNotificationSSDCallMessage3)

		Execution::DeliveryNotificationSSDExecution1(DeliveryNotificationService DeliveryNotificationSSDExecution1StartEnd DeliveryNotificationSSDExecution1FinishEnd)
		Execution::DeliveryNotificationSSDExecution2(DeliveryNotificationService DeliveryNotificationSSDExecution2StartEnd DeliveryNotificationSSDExecution2FinishEnd)

		MessageEnd::DeliveryNotificationSSDCallMessage1SendingEnd(SalesStaff DeliveryNotificationSSDCallMessage1)
		ExecutionEnd::DeliveryNotificationSSDExecution1StartEnd(DeliveryNotificationService DeliveryNotificationSSDExecution1)
		ExecutionEnd::DeliveryNotificationSSDExecution1FinishEnd(DeliveryNotificationService DeliveryNotificationSSDExecution1)
		MessageEnd::DeliveryNotificationSSDCallMessage1ReturnReceivingEnd(SalesStaff DeliveryNotificationSSDCallMessage1Return)
		MessageEnd::DeliveryNotificationSSDCallMessage3SendingEnd(SalesStaff DeliveryNotificationSSDCallMessage3)
		ExecutionEnd::DeliveryNotificationSSDExecution2StartEnd(DeliveryNotificationService DeliveryNotificationSSDExecution2)
		ExecutionEnd::DeliveryNotificationSSDExecution2FinishEnd(DeliveryNotificationService DeliveryNotificationSSDExecution2)
		MessageEnd::DeliveryNotificationSSDCallMessage3ReturnReceivingEnd(SalesStaff DeliveryNotificationSSDCallMessage3Return)

	}

	Interaction ExchangeProcessingSSD {

		[Participants: SalesStaff ExchangeProcessingService]

		CallMessage::ExchangeProcessingSSDCallMessage1(typeChoice ExchangeProcessingSSDCallMessage1SendingEnd -> ExchangeProcessingSSDExecution1StartEnd)
		ReturnMessage::ExchangeProcessingSSDCallMessage1Return(ExchangeProcessingSSDExecution1FinishEnd -> ExchangeProcessingSSDCallMessage1ReturnReceivingEnd ExchangeProcessingSSDCallMessage1)
		CallMessage::ExchangeProcessingSSDCallMessage3(cancelOrder ExchangeProcessingSSDCallMessage3SendingEnd -> ExchangeProcessingSSDExecution2StartEnd)
		ReturnMessage::ExchangeProcessingSSDCallMessage3Return(ExchangeProcessingSSDExecution2FinishEnd -> ExchangeProcessingSSDCallMessage3ReturnReceivingEnd ExchangeProcessingSSDCallMessage3)
		CallMessage::ExchangeProcessingSSDCallMessage5(regenerateBillOfLading ExchangeProcessingSSDCallMessage5SendingEnd -> ExchangeProcessingSSDExecution3StartEnd)
		ReturnMessage::ExchangeProcessingSSDCallMessage5Return(ExchangeProcessingSSDExecution3FinishEnd -> ExchangeProcessingSSDCallMessage5ReturnReceivingEnd ExchangeProcessingSSDCallMessage5)
		CallMessage::ExchangeProcessingSSDCallMessage7(regenerateNotification ExchangeProcessingSSDCallMessage7SendingEnd -> ExchangeProcessingSSDExecution4StartEnd)
		ReturnMessage::ExchangeProcessingSSDCallMessage7Return(ExchangeProcessingSSDExecution4FinishEnd -> ExchangeProcessingSSDCallMessage7ReturnReceivingEnd ExchangeProcessingSSDCallMessage7)

		Execution::ExchangeProcessingSSDExecution1(ExchangeProcessingService ExchangeProcessingSSDExecution1StartEnd ExchangeProcessingSSDExecution1FinishEnd)
		Execution::ExchangeProcessingSSDExecution2(ExchangeProcessingService ExchangeProcessingSSDExecution2StartEnd ExchangeProcessingSSDExecution2FinishEnd)
		Execution::ExchangeProcessingSSDExecution3(ExchangeProcessingService ExchangeProcessingSSDExecution3StartEnd ExchangeProcessingSSDExecution3FinishEnd)
		Execution::ExchangeProcessingSSDExecution4(ExchangeProcessingService ExchangeProcessingSSDExecution4StartEnd ExchangeProcessingSSDExecution4FinishEnd)

		MessageEnd::ExchangeProcessingSSDCallMessage1SendingEnd(SalesStaff ExchangeProcessingSSDCallMessage1)
		ExecutionEnd::ExchangeProcessingSSDExecution1StartEnd(ExchangeProcessingService ExchangeProcessingSSDExecution1)
		ExecutionEnd::ExchangeProcessingSSDExecution1FinishEnd(ExchangeProcessingService ExchangeProcessingSSDExecution1)
		MessageEnd::ExchangeProcessingSSDCallMessage1ReturnReceivingEnd(SalesStaff ExchangeProcessingSSDCallMessage1Return)
		MessageEnd::ExchangeProcessingSSDCallMessage3SendingEnd(SalesStaff ExchangeProcessingSSDCallMessage3)
		ExecutionEnd::ExchangeProcessingSSDExecution2StartEnd(ExchangeProcessingService ExchangeProcessingSSDExecution2)
		ExecutionEnd::ExchangeProcessingSSDExecution2FinishEnd(ExchangeProcessingService ExchangeProcessingSSDExecution2)
		MessageEnd::ExchangeProcessingSSDCallMessage3ReturnReceivingEnd(SalesStaff ExchangeProcessingSSDCallMessage3Return)
		MessageEnd::ExchangeProcessingSSDCallMessage5SendingEnd(SalesStaff ExchangeProcessingSSDCallMessage5)
		ExecutionEnd::ExchangeProcessingSSDExecution3StartEnd(ExchangeProcessingService ExchangeProcessingSSDExecution3)
		ExecutionEnd::ExchangeProcessingSSDExecution3FinishEnd(ExchangeProcessingService ExchangeProcessingSSDExecution3)
		MessageEnd::ExchangeProcessingSSDCallMessage5ReturnReceivingEnd(SalesStaff ExchangeProcessingSSDCallMessage5Return)
		MessageEnd::ExchangeProcessingSSDCallMessage7SendingEnd(SalesStaff ExchangeProcessingSSDCallMessage7)
		ExecutionEnd::ExchangeProcessingSSDExecution4StartEnd(ExchangeProcessingService ExchangeProcessingSSDExecution4)
		ExecutionEnd::ExchangeProcessingSSDExecution4FinishEnd(ExchangeProcessingService ExchangeProcessingSSDExecution4)
		MessageEnd::ExchangeProcessingSSDCallMessage7ReturnReceivingEnd(SalesStaff ExchangeProcessingSSDCallMessage7Return)

	}

	Interaction SalesPlanManagementSSD {

		[Participants: DepartmentManager SalesPlanManagementService]

		CallMessage::SalesPlanManagementSSDCallMessage1(makeNewPlan SalesPlanManagementSSDCallMessage1SendingEnd -> SalesPlanManagementSSDExecution1StartEnd)
		ReturnMessage::SalesPlanManagementSSDCallMessage1Return(SalesPlanManagementSSDExecution1FinishEnd -> SalesPlanManagementSSDCallMessage1ReturnReceivingEnd SalesPlanManagementSSDCallMessage1)
		CallMessage::SalesPlanManagementSSDCallMessage3(addItemIntoPlan SalesPlanManagementSSDCallMessage3SendingEnd -> SalesPlanManagementSSDExecution2StartEnd)
		ReturnMessage::SalesPlanManagementSSDCallMessage3Return(SalesPlanManagementSSDExecution2FinishEnd -> SalesPlanManagementSSDCallMessage3ReturnReceivingEnd SalesPlanManagementSSDCallMessage3)
		CallMessage::SalesPlanManagementSSDCallMessage5(generatePlan SalesPlanManagementSSDCallMessage5SendingEnd -> SalesPlanManagementSSDExecution3StartEnd)
		ReturnMessage::SalesPlanManagementSSDCallMessage5Return(SalesPlanManagementSSDExecution3FinishEnd -> SalesPlanManagementSSDCallMessage5ReturnReceivingEnd SalesPlanManagementSSDCallMessage5)

		Execution::SalesPlanManagementSSDExecution1(SalesPlanManagementService SalesPlanManagementSSDExecution1StartEnd SalesPlanManagementSSDExecution1FinishEnd)
		Execution::SalesPlanManagementSSDExecution2(SalesPlanManagementService SalesPlanManagementSSDExecution2StartEnd SalesPlanManagementSSDExecution2FinishEnd)
		Execution::SalesPlanManagementSSDExecution3(SalesPlanManagementService SalesPlanManagementSSDExecution3StartEnd SalesPlanManagementSSDExecution3FinishEnd)

		MessageEnd::SalesPlanManagementSSDCallMessage1SendingEnd(DepartmentManager SalesPlanManagementSSDCallMessage1)
		ExecutionEnd::SalesPlanManagementSSDExecution1StartEnd(SalesPlanManagementService SalesPlanManagementSSDExecution1)
		ExecutionEnd::SalesPlanManagementSSDExecution1FinishEnd(SalesPlanManagementService SalesPlanManagementSSDExecution1)
		MessageEnd::SalesPlanManagementSSDCallMessage1ReturnReceivingEnd(DepartmentManager SalesPlanManagementSSDCallMessage1Return)
		MessageEnd::SalesPlanManagementSSDCallMessage3SendingEnd(DepartmentManager SalesPlanManagementSSDCallMessage3)
		ExecutionEnd::SalesPlanManagementSSDExecution2StartEnd(SalesPlanManagementService SalesPlanManagementSSDExecution2)
		ExecutionEnd::SalesPlanManagementSSDExecution2FinishEnd(SalesPlanManagementService SalesPlanManagementSSDExecution2)
		MessageEnd::SalesPlanManagementSSDCallMessage3ReturnReceivingEnd(DepartmentManager SalesPlanManagementSSDCallMessage3Return)
		MessageEnd::SalesPlanManagementSSDCallMessage5SendingEnd(DepartmentManager SalesPlanManagementSSDCallMessage5)
		ExecutionEnd::SalesPlanManagementSSDExecution3StartEnd(SalesPlanManagementService SalesPlanManagementSSDExecution3)
		ExecutionEnd::SalesPlanManagementSSDExecution3FinishEnd(SalesPlanManagementService SalesPlanManagementSSDExecution3)
		MessageEnd::SalesPlanManagementSSDCallMessage5ReturnReceivingEnd(DepartmentManager SalesPlanManagementSSDCallMessage5Return)

	}

	Interaction TradingTerminationAndSettlementSSD {

		[Participants: FinancialStaff TradingTerminationAndSettlementService]

		CallMessage::TradingTerminationAndSettlementSSDCallMessage1(orderTerminationAndSettlement TradingTerminationAndSettlementSSDCallMessage1SendingEnd -> TradingTerminationAndSettlementSSDExecution1StartEnd)
		ReturnMessage::TradingTerminationAndSettlementSSDCallMessage1Return(TradingTerminationAndSettlementSSDExecution1FinishEnd -> TradingTerminationAndSettlementSSDCallMessage1ReturnReceivingEnd TradingTerminationAndSettlementSSDCallMessage1)
		CallMessage::TradingTerminationAndSettlementSSDCallMessage3(contractTerminationAndSettlement TradingTerminationAndSettlementSSDCallMessage3SendingEnd -> TradingTerminationAndSettlementSSDExecution2StartEnd)
		ReturnMessage::TradingTerminationAndSettlementSSDCallMessage3Return(TradingTerminationAndSettlementSSDExecution2FinishEnd -> TradingTerminationAndSettlementSSDCallMessage3ReturnReceivingEnd TradingTerminationAndSettlementSSDCallMessage3)
		CallMessage::TradingTerminationAndSettlementSSDCallMessage5(payment TradingTerminationAndSettlementSSDCallMessage5SendingEnd -> TradingTerminationAndSettlementSSDExecution3StartEnd)
		ReturnMessage::TradingTerminationAndSettlementSSDCallMessage5Return(TradingTerminationAndSettlementSSDExecution3FinishEnd -> TradingTerminationAndSettlementSSDCallMessage5ReturnReceivingEnd TradingTerminationAndSettlementSSDCallMessage5)
		CallMessage::TradingTerminationAndSettlementSSDCallMessage7(generateInvoice TradingTerminationAndSettlementSSDCallMessage7SendingEnd -> TradingTerminationAndSettlementSSDExecution4StartEnd)
		ReturnMessage::TradingTerminationAndSettlementSSDCallMessage7Return(TradingTerminationAndSettlementSSDExecution4FinishEnd -> TradingTerminationAndSettlementSSDCallMessage7ReturnReceivingEnd TradingTerminationAndSettlementSSDCallMessage7)

		Execution::TradingTerminationAndSettlementSSDExecution1(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution1StartEnd TradingTerminationAndSettlementSSDExecution1FinishEnd)
		Execution::TradingTerminationAndSettlementSSDExecution2(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution2StartEnd TradingTerminationAndSettlementSSDExecution2FinishEnd)
		Execution::TradingTerminationAndSettlementSSDExecution3(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution3StartEnd TradingTerminationAndSettlementSSDExecution3FinishEnd)
		Execution::TradingTerminationAndSettlementSSDExecution4(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution4StartEnd TradingTerminationAndSettlementSSDExecution4FinishEnd)

		MessageEnd::TradingTerminationAndSettlementSSDCallMessage1SendingEnd(FinancialStaff TradingTerminationAndSettlementSSDCallMessage1)
		ExecutionEnd::TradingTerminationAndSettlementSSDExecution1StartEnd(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution1)
		ExecutionEnd::TradingTerminationAndSettlementSSDExecution1FinishEnd(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution1)
		MessageEnd::TradingTerminationAndSettlementSSDCallMessage1ReturnReceivingEnd(FinancialStaff TradingTerminationAndSettlementSSDCallMessage1Return)
		MessageEnd::TradingTerminationAndSettlementSSDCallMessage3SendingEnd(FinancialStaff TradingTerminationAndSettlementSSDCallMessage3)
		ExecutionEnd::TradingTerminationAndSettlementSSDExecution2StartEnd(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution2)
		ExecutionEnd::TradingTerminationAndSettlementSSDExecution2FinishEnd(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution2)
		MessageEnd::TradingTerminationAndSettlementSSDCallMessage3ReturnReceivingEnd(FinancialStaff TradingTerminationAndSettlementSSDCallMessage3Return)
		MessageEnd::TradingTerminationAndSettlementSSDCallMessage5SendingEnd(FinancialStaff TradingTerminationAndSettlementSSDCallMessage5)
		ExecutionEnd::TradingTerminationAndSettlementSSDExecution3StartEnd(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution3)
		ExecutionEnd::TradingTerminationAndSettlementSSDExecution3FinishEnd(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution3)
		MessageEnd::TradingTerminationAndSettlementSSDCallMessage5ReturnReceivingEnd(FinancialStaff TradingTerminationAndSettlementSSDCallMessage5Return)
		MessageEnd::TradingTerminationAndSettlementSSDCallMessage7SendingEnd(FinancialStaff TradingTerminationAndSettlementSSDCallMessage7)
		ExecutionEnd::TradingTerminationAndSettlementSSDExecution4StartEnd(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution4)
		ExecutionEnd::TradingTerminationAndSettlementSSDExecution4FinishEnd(TradingTerminationAndSettlementService TradingTerminationAndSettlementSSDExecution4)
		MessageEnd::TradingTerminationAndSettlementSSDCallMessage7ReturnReceivingEnd(FinancialStaff TradingTerminationAndSettlementSSDCallMessage7Return)

	}

	Service SalesManagementSystemSystem {

		[Operation]
		salesPlanManagement()
		manageItemsPrices()
		postingOfAccount()
		salesCommissionManagement()

	}

	Service ThirdPartyServices {

		[Operation]
		authorizationProcessing()

	}

	Service ManageContractsCRUDService {

		[Operation]
		createContracts(id, buyer, packing, dateofshipment, portofshipment, portofdestination, insurance, effectivedate)
		queryContracts(id)
		modifyContracts(id, buyer, packing, dateofshipment, portofshipment, portofdestination, insurance, effectivedate)
		deleteContracts(id)

	}

	Service ManageClientCRUDService {

		[Operation]
		createClient(id, name, address, contact, phonenumber,groupId)
		queryClient(id)
		modifyClient(id, name, address, contact, phonenumber,groupId)
		deleteClient(id)
		createClientGroup()
		queryClientGroup()
		modifyClientGroup()
		deleteClientGroup()

	}

	Service ManageOrderCRUDService {

		[Operation]
		createOrder(id, iscompleted, paymentinformation, amount)
		queryOrder(id)
		modifyOrder(id, iscompleted, paymentinformation, amount)
		deleteOrder(id)

	}

	Service ManageInvoiceCRUDService {

		[Operation]
		createInvoice(id, title, effecitvedate, amount)
		queryInvoice(id)
		modifyInvoice(id, title, effecitvedate, amount)
		deleteInvoice(id)

	}

	Service ManageBillOfLadingCRUDService {

		[Operation]
		createBillOfLading(id, consignee, commoditylist, totalprice, deadlineforperformance, locationforperformance, methodforperformance)
		queryBillOfLading(id)
		modifyBillOfLading(id, consignee, commoditylist, totalprice, deadlineforperformance, locationforperformance, methodforperformance)
		deleteBillOfLading(id)

	}

	Service ManageProductCRUDService {

		[Operation]
		createProduct(id, name, price)
		queryProduct(id)
		modifyProduct(id, name, price)
		deleteProduct(id)

	}

	Service SalesProcessingService {

		[Operation]
		makeNewOrder(buyerId)
		addProduct(id, quantity)
		generateContract(packing, dateOfShipment, portOfShipment, portOfDestination, insurance, effectiveDate)
		authorization()
		generateOrder()

		[TempProperty]
		currentOrderLine : OrderLineProduct
		currentOrder : Order

	}

	Service DeliveryNotificationService {

		[Operation]
		generateBillOfLading()
		generateNotification()

	}

	Service ExchangeProcessingService {

		[Operation]
		typeChoice()
		cancelOrder()
		regenerateBillOfLading()
		regenerateNotification()

	}

	Service SalesPlanManagementService {

		[Operation]
		makeNewPlan()
		addItemIntoPlan()
		generatePlan()

	}

	Service TradingTerminationAndSettlementService {

		[Operation]
		contractTerminationAndSettlement()
		orderTerminationAndSettlement()
		payment()
		generateInvoice()

	}

	Service ManageOrderMethodCRUDService {

		[Operation]
		createOrderMethod(id, name)
		queryOrderMethod(id)
		modifyOrderMethod(id, name)
		deleteOrderMethod(id)

	}

	Service ManageDeliveryMethodCRUDService {

		[Operation]
		createDeliveryMethod(id, name)
		queryDeliveryMethod(id)
		modifyDeliveryMethod(id, name)
		deleteDeliveryMethod(id)

	}

	Contract SalesProcessingService::makeNewOrder(buyerId : Integer) : Boolean {

		definition:
			buyer:Client = Client.allInstance()->any(bu:Client | bu.Id = buyerId)

		precondition:
			buyer.oclIsUndefined() = false and
			Client.allInstance()->includes(buyer) and
			(currentOrder.oclIsUndefined() = true or
				(currentOrder.oclIsUndefined() = false and
					currentOrder.IsCompleted = true
				)
			)

		postcondition:
			let o:Order in
			o.oclIsNew() and
			o.Buyer = buyer and
			buyer.ContainedOrders->includes(o) and
			o.IsCompleted = false and
			Order.allInstance()->includes(o) and
			self.currentOrder = o and
			result = true
	}

	Contract SalesProcessingService::addProduct(id : Integer, quantity : Integer) : Boolean {

		definition:
			product:Product = Product.allInstance()->any(pr:Product | pr.Id = id)

		precondition:
			currentOrder.oclIsUndefined() = false and
			currentOrder.IsCompleted = false and
			product.oclIsUndefined() = false

		postcondition:
			let olp:OrderLineProduct in
			olp.oclIsNew() and
			currentOrderLine = olp and
			olp.BelongedOrder = currentOrder and
			currentOrder.ContainedOrderLine->includes(olp) and
			olp.Quantity = quantity and
			olp.BelongedProduct = product and
			olp.SubAmount = product.Price * quantity and
			OrderLineProduct.allInstance()->includes(olp) and
			result = true
	}

	Contract SalesProcessingService::generateContract(packing : String, dateOfShipment : Date, portOfShipment : String, portOfDestination : String, insurance : String, effectiveDate : Date) : Boolean {

		precondition:
			currentOrder.oclIsUndefined() = false and
			currentOrder.IsCompleted = false
		postcondition:
			let con:Contracts in
			con.oclIsNew() and
			con.Id = currentOrder.Id and
			con.BelongedOrder = currentOrder and
			con.Packing = packing and
			con.DateOfShipment = dateOfShipment and
			con.PortOfShipment = portOfShipment and
			con.PortOfDestination = portOfDestination and
			con.Insurance = insurance and
			con.EffectiveDate = effectiveDate and
			Contracts.allInstance()->includes(con) and
			result = true

	}

	Contract SalesProcessingService::generateOrder() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract SalesManagementSystemSystem::salesPlanManagement() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract SalesManagementSystemSystem::postingOfAccount() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract SalesManagementSystemSystem::salesCommissionManagement() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract SalesProcessingService::authorization() : Boolean {

		precondition:
			authorizationProcessing()
		postcondition:
			result = true
	}

	Contract ThirdPartyServices::authorizationProcessing() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	// entity create operation 
	Contract  ManageContractsCRUDService::createContracts(id : Integer, buyer : String, packing : String, dateofshipment : Date, portofshipment : String, portofdestination : String, insurance : String, effectivedate : Date) : Boolean {

		/* definition: find specific Contracts instance by id */
		definition:
			contracts:Contracts = Contracts.allInstance()->any(con:Contracts | con.Id = id)

		/* precondition: the instance contracts was not found in the system */
		precondition:
			contracts.oclIsUndefined() = true

		/* postcondition: 
		 * A Contracts instance con was created.
		 * all properties of con became the same values as inputs.
		 */
		postcondition:
			let con:Contracts in
			con.oclIsNew() and
			con.Id = id and
			con.Buyer = buyer and
			con.Packing = packing and
			con.DateOfShipment = dateofshipment and
			con.PortOfShipment = portofshipment and
			con.PortOfDestination = portofdestination and
			con.Insurance = insurance and
			con.EffectiveDate = effectivedate and
			Contracts.allInstance()->includes(con) and
			result = true
	}

	// entity query operation 
	Contract  ManageContractsCRUDService::queryContracts(id : Integer) : Contracts {

		/* definition: find specific Contracts instance by id */
		definition:
			contracts:Contracts = Contracts.allInstance()->any(con:Contracts | con.Id = id)

		/* precondition: the instance contracts was found in the system */
		precondition:
			contracts.oclIsUndefined() = false

		/* postcondition: return found the instance contracts */
		postcondition:
			result = contracts
	}

	// entity modify operation 
	Contract  ManageContractsCRUDService::modifyContracts(id : Integer, buyer : String, packing : String, dateofshipment : Date, portofshipment : String, portofdestination : String, insurance : String, effectivedate : Date) : Boolean {

		/* definition: find specific Contracts instance by id */
		definition:
			contracts:Contracts = Contracts.allInstance()->any(con:Contracts | con.Id = id)

		/* precondition: the instance contracts was found in the system */
		precondition:
			contracts.oclIsUndefined() = false

		/* postcondition: all properties of con became the same values as inputs. */
		postcondition:
			contracts.Id = id and
			contracts.Buyer = buyer and
			contracts.Packing = packing and
			contracts.DateOfShipment = dateofshipment and
			contracts.PortOfShipment = portofshipment and
			contracts.PortOfDestination = portofdestination and
			contracts.Insurance = insurance and
			contracts.EffectiveDate = effectivedate and
			result = true
	}

	// entity delete operation 
	Contract  ManageContractsCRUDService::deleteContracts(id : Integer) : Boolean {

		/* definition: find specific Contracts instance by id */
		definition:
			contracts:Contracts = Contracts.allInstance()->any(con:Contracts | con.Id = id)

		/* precondition: the instance contracts was found in the system */
		precondition:
			contracts.oclIsUndefined() = false and
			Contracts.allInstance()->includes(contracts)

		/* postcondition: the instance contracts was deleted from the system */
		postcondition:
			Contracts.allInstance()->excludes(contracts) and
			result = true
	}

	// entity create operation 
	Contract  ManageInvoiceCRUDService::createInvoice(id : Integer, title : String, effecitvedate : Date, amount : Real) : Boolean {

		/* definition: find specific Invoice instance by id */
		definition:
			invoice:Invoice = Invoice.allInstance()->any(invo:Invoice | invo.Id = id)

		/* precondition: the instance invoice was not found in the system */
		precondition:
			invoice.oclIsUndefined() = true

		/* postcondition: 
		 * A Invoice instance inv was created.
		 * all properties of inv became the same values as inputs.
		 */
		postcondition:
			let invo:Invoice in
			invo.oclIsNew() and
			invo.Id = id and
			invo.Title = title and
			invo.EffecitveDate = effecitvedate and
			invo.Amount = amount and
			Invoice.allInstance()->includes(invo) and
			result = true
	}

	// entity query operation 
	Contract  ManageInvoiceCRUDService::queryInvoice(id : Integer) : Invoice {

		/* definition: find specific Invoice instance by id */
		definition:
			invoice:Invoice = Invoice.allInstance()->any(invo:Invoice | invo.Id = id)

		/* precondition: the instance invoice was found in the system */
		precondition:
			invoice.oclIsUndefined() = false

		/* postcondition: return found the instance invoice */
		postcondition:
			result = invoice
	}

	// entity modify operation 
	Contract  ManageInvoiceCRUDService::modifyInvoice(id : Integer, title : String, effecitvedate : Date, amount : Real) : Boolean {

		/* definition: find specific Invoice instance by id */
		definition:
			invoice:Invoice = Invoice.allInstance()->any(invo:Invoice | invo.Id = id)

		/* precondition: the instance invoice was found in the system */
		precondition:
			invoice.oclIsUndefined() = false

		/* postcondition: all properties of invo became the same values as inputs. */
		postcondition:
			invoice.Id = id and
			invoice.Title = title and
			invoice.EffecitveDate = effecitvedate and
			invoice.Amount = amount and
			result = true
	}

	// entity delete operation 
	Contract  ManageInvoiceCRUDService::deleteInvoice(id : Integer) : Boolean {

		/* definition: find specific Invoice instance by id */
		definition:
			invoice:Invoice = Invoice.allInstance()->any(invo:Invoice | invo.Id = id)

		/* precondition: the instance invoice was found in the system */
		precondition:
			invoice.oclIsUndefined() = false and
			Invoice.allInstance()->includes(invoice)

		/* postcondition: the instance invoice was deleted from the system */
		postcondition:
			Invoice.allInstance()->excludes(invoice) and
			result = true
	}

	// entity create operation 
	Contract  ManageClientCRUDService::createClient(id : Integer, name : String, address : String, contact : String, phonenumber : String, groupId : Integer) : Boolean {

		/* definition: find specific Client instance by id */
		definition:
			client:Client = Client.allInstance()->any(cli:Client | cli.Id = id)

		/* precondition: the instance client was not found in the system */
		precondition:
			client.oclIsUndefined() = true

		/* postcondition: 
		 * A Client instance cli was created.
		 * all properties of cli became the same values as inputs.
		 */
		postcondition:
			let cli:Client in
			cli.oclIsNew() and
			cli.Id = id and
			cli.Name = name and
			cli.Address = address and
			cli.Contact = contact and
			cli.PhoneNumber = phonenumber and
			Client.allInstance()->includes(cli) and
			result = true
	}

	// entity query operation 
	Contract  ManageClientCRUDService::queryClient(id : Integer) : Client {

		/* definition: find specific Client instance by id */
		definition:
			client:Client = Client.allInstance()->any(cli:Client | cli.Id = id)

		/* precondition: the instance client was found in the system */
		precondition:
			client.oclIsUndefined() = false

		/* postcondition: return found the instance client */
		postcondition:
			result = client
	}

	// entity modify operation 
	Contract  ManageClientCRUDService::modifyClient(id : Integer, name : String, address : String, contact : String, phonenumber : String, groupId : Integer) : Boolean {

		/* definition: find specific Client instance by id */
		definition:
			client:Client = Client.allInstance()->any(cli:Client | cli.Id = id)

		/* precondition: the instance client was found in the system */
		precondition:
			client.oclIsUndefined() = false

		/* postcondition: all properties of cli became the same values as inputs. */
		postcondition:
			client.Id = id and
			client.Name = name and
			client.Address = address and
			client.Contact = contact and
			client.PhoneNumber = phonenumber and
			result = true
	}

	// entity delete operation 
	Contract  ManageClientCRUDService::deleteClient(id : Integer) : Boolean {

		/* definition: find specific Client instance by id */
		definition:
			client:Client = Client.allInstance()->any(cli:Client | cli.Id = id)

		/* precondition: the instance client was found in the system */
		precondition:
			client.oclIsUndefined() = false and
			Client.allInstance()->includes(client)

		/* postcondition: the instance client was deleted from the system */
		postcondition:
			Client.allInstance()->excludes(client) and
			result = true
	}

	// entity create operation 
	Contract  ManageOrderCRUDService::createOrder(id : Integer, iscompleted : Boolean, paymentinformation : String, amount : Real) : Boolean {

		/* definition: find specific Order instance by id */
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.Id = id)

		/* precondition: the instance order was not found in the system */
		precondition:
			order.oclIsUndefined() = true

		/* postcondition: 
		 * A Order instance ord was created.
		 * all properties of ord became the same values as inputs.
		 */
		postcondition:
			let ord:Order in
			ord.oclIsNew() and
			ord.Id = id and
			ord.IsCompleted = iscompleted and
			ord.PaymentInformation = paymentinformation and
			ord.Amount = amount and
			Order.allInstance()->includes(ord) and
			result = true
	}

	// entity query operation 
	Contract  ManageOrderCRUDService::queryOrder(id : Integer) : Order {

		/* definition: find specific Order instance by id */
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.Id = id)

		/* precondition: the instance order was found in the system */
		precondition:
			order.oclIsUndefined() = false

		/* postcondition: return found the instance order */
		postcondition:
			result = order
	}

	// entity modify operation 
	Contract  ManageOrderCRUDService::modifyOrder(id : Integer, iscompleted : Boolean, paymentinformation : String, amount : Real) : Boolean {

		/* definition: find specific Order instance by id */
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.Id = id)

		/* precondition: the instance order was found in the system */
		precondition:
			order.oclIsUndefined() = false

		/* postcondition: all properties of ord became the same values as inputs. */
		postcondition:
			order.Id = id and
			order.IsCompleted = iscompleted and
			order.PaymentInformation = paymentinformation and
			order.Amount = amount and
			result = true
	}

	// entity delete operation 
	Contract  ManageOrderCRUDService::deleteOrder(id : Integer) : Boolean {

		/* definition: find specific Order instance by id */
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.Id = id)

		/* precondition: the instance order was found in the system */
		precondition:
			order.oclIsUndefined() = false and
			Order.allInstance()->includes(order)

		/* postcondition: the instance order was deleted from the system */
		postcondition:
			Order.allInstance()->excludes(order) and
			result = true
	}

	// entity create operation 
	Contract  ManageProductCRUDService::createProduct(id : Integer, name : String, price : Real) : Boolean {

		/* definition: find specific Product instance by id */
		definition:
			product:Product = Product.allInstance()->any(pro:Product | pro.Id = id)

		/* precondition: the instance product was not found in the system */
		precondition:
			product.oclIsUndefined() = true

		/* postcondition: 
		 * A Product instance pro was created.
		 * all properties of pro became the same values as inputs.
		 */
		postcondition:
			let pro:Product in
			pro.oclIsNew() and
			pro.Id = id and
			pro.Name = name and
			pro.Price = price and
			Product.allInstance()->includes(pro) and
			result = true
	}

	// entity query operation 
	Contract  ManageProductCRUDService::queryProduct(id : Integer) : Product {

		/* definition: find specific Product instance by id */
		definition:
			product:Product = Product.allInstance()->any(pro:Product | pro.Id = id)

		/* precondition: the instance product was found in the system */
		precondition:
			product.oclIsUndefined() = false

		/* postcondition: return found the instance product */
		postcondition:
			result = product
	}

	// entity modify operation 
	Contract  ManageProductCRUDService::modifyProduct(id : Integer, name : String, price : Real) : Boolean {

		/* definition: find specific Product instance by id */
		definition:
			product:Product = Product.allInstance()->any(pro:Product | pro.Id = id)

		/* precondition: the instance product was found in the system */
		precondition:
			product.oclIsUndefined() = false

		/* postcondition: all properties of pro became the same values as inputs. */
		postcondition:
			product.Id = id and
			product.Name = name and
			product.Price = price and
			result = true
	}

	// entity delete operation 
	Contract  ManageProductCRUDService::deleteProduct(id : Integer) : Boolean {

		/* definition: find specific Product instance by id */
		definition:
			product:Product = Product.allInstance()->any(pro:Product | pro.Id = id)

		/* precondition: the instance product was found in the system */
		precondition:
			product.oclIsUndefined() = false and
			Product.allInstance()->includes(product)

		/* postcondition: the instance product was deleted from the system */
		postcondition:
			Product.allInstance()->excludes(product) and
			result = true
	}

	// entity create operation
	Contract  ManageBillOfLadingCRUDService::createBillOfLading(id : Integer, consignee : String, commoditylist : String, totalprice : Real, deadlineforperformance : String, locationforperformance : String, methodforperformance : String) : Boolean {

		/* definition: find specific BillOfLading instance by id */
		definition:
			billoflading:BillOfLading = BillOfLading.allInstance()->any(bil:BillOfLading | bil.Id = id)

		/* precondition: the instance billoflading was not found in the system */
		precondition:
			billoflading.oclIsUndefined() = true

		/* postcondition: 
		 * A BillOfLading instance bil was created.
		 * all properties of bil became the same values as inputs.
		 */
		postcondition:
			let bil:BillOfLading in
			bil.oclIsNew() and
			bil.Id = id and
			bil.Consignee = consignee and
			bil.CommodityList = commoditylist and
			bil.TotalPrice = totalprice and
			bil.DeadlineForPerformance = deadlineforperformance and
			bil.LocationForPerformance = locationforperformance and
			bil.MethodForPerformance = methodforperformance and
			BillOfLading.allInstance()->includes(bil) and
			result = true
	}

	// entity query operation 
	Contract  ManageBillOfLadingCRUDService::queryBillOfLading(id : Integer) : BillOfLading {

		/* definition: find specific BillOfLading instance by id */
		definition:
			billoflading:BillOfLading = BillOfLading.allInstance()->any(bil:BillOfLading | bil.Id = id)

		/* precondition: the instance billoflading was found in the system */
		precondition:
			billoflading.oclIsUndefined() = false

		/* postcondition: return found the instance billoflading */
		postcondition:
			result = billoflading
	}

	// entity modify operation 
	Contract  ManageBillOfLadingCRUDService::modifyBillOfLading(id : Integer, consignee : String, commoditylist : String, totalprice : Real, deadlineforperformance : String, locationforperformance : String, methodforperformance : String) : Boolean {

		/* definition: find specific BillOfLading instance by id */
		definition:
			billoflading:BillOfLading = BillOfLading.allInstance()->any(bil:BillOfLading | bil.Id = id)

		/* precondition: the instance billoflading was found in the system */
		precondition:
			billoflading.oclIsUndefined() = false

		/* postcondition: all properties of bil became the same values as inputs. */
		postcondition:
			billoflading.Id = id and
			billoflading.Consignee = consignee and
			billoflading.CommodityList = commoditylist and
			billoflading.TotalPrice = totalprice and
			billoflading.DeadlineForPerformance = deadlineforperformance and
			billoflading.LocationForPerformance = locationforperformance and
			billoflading.MethodForPerformance = methodforperformance and
			result = true
	}

	// entity delete operation 
	Contract  ManageBillOfLadingCRUDService::deleteBillOfLading(id : Integer) : Boolean {

		/* definition: find specific BillOfLading instance by id */
		definition:
			billoflading:BillOfLading = BillOfLading.allInstance()->any(bil:BillOfLading | bil.Id = id)

		/* precondition: the instance billoflading was found in the system */
		precondition:
			billoflading.oclIsUndefined() = false and
			BillOfLading.allInstance()->includes(billoflading)

		/* postcondition: the instance billoflading was deleted from the system */
		postcondition:
			BillOfLading.allInstance()->excludes(billoflading) and
			result = true
	}

	// entity create operation 
	Contract  ManageOrderMethodCRUDService::createOrderMethod(id : Integer, name : String) : Boolean {

		/* definition: find specific OrderMethod instance by id */
		definition:
			ordermethod:OrderMethod = OrderMethod.allInstance()->any(ord:OrderMethod | ord.Id = id)

		/* precondition: the instance ordermethod was not found in the system */
		precondition:
			ordermethod.oclIsUndefined() = true

		/* postcondition: 
		 * A OrderMethod instance ord was created.
		 * all properties of ord became the same values as inputs.
		 */
		postcondition:
			let ord:OrderMethod in
			ord.oclIsNew() and
			ord.Id = id and
			ord.Name = name and
			OrderMethod.allInstance()->includes(ord) and
			result = true
	}

	// entity query operation 
	Contract  ManageOrderMethodCRUDService::queryOrderMethod(id : Integer) : OrderMethod {

		/* definition: find specific OrderMethod instance by id */
		definition:
			ordermethod:OrderMethod = OrderMethod.allInstance()->any(ord:OrderMethod | ord.Id = id)

		/* precondition: the instance ordermethod was found in the system */
		precondition:
			ordermethod.oclIsUndefined() = false

		/* postcondition: return found the instance ordermethod */
		postcondition:
			result = ordermethod
	}

	// entity modify operation 
	Contract  ManageOrderMethodCRUDService::modifyOrderMethod(id : Integer, name : String) : Boolean {

		/* definition: find specific OrderMethod instance by id */
		definition:
			ordermethod:OrderMethod = OrderMethod.allInstance()->any(ord:OrderMethod | ord.Id = id)

		/* precondition: the instance ordermethod was found in the system */
		precondition:
			ordermethod.oclIsUndefined() = false

		/* postcondition: all properties of ord became the same values as inputs. */
		postcondition:
			ordermethod.Id = id and
			ordermethod.Name = name and
			result = true
	}

	// entity delete operation 
	Contract  ManageOrderMethodCRUDService::deleteOrderMethod(id : Integer) : Boolean {

		/* definition: find specific OrderMethod instance by id */
		definition:
			ordermethod:OrderMethod = OrderMethod.allInstance()->any(ord:OrderMethod | ord.Id = id)

		/* precondition: the instance ordermethod was found in the system */
		precondition:
			ordermethod.oclIsUndefined() = false and
			OrderMethod.allInstance()->includes(ordermethod)

		/* postcondition: the instance ordermethod was deleted from the system */
		postcondition:
			OrderMethod.allInstance()->excludes(ordermethod) and
			result = true
	}

	// entity create operation 
	Contract  ManageDeliveryMethodCRUDService::createDeliveryMethod(id : Integer, name : String) : Boolean {

		/* definition: find specific DeliveryMethod instance by id */
		definition:
			deliverymethod:DeliveryMethod = DeliveryMethod.allInstance()->any(del:DeliveryMethod | del.Id = id)

		/* precondition: the instance deliverymethod was not found in the system */
		precondition:
			deliverymethod.oclIsUndefined() = true

		/* postcondition: 
		 * A DeliveryMethod instance del was created.
		 * all properties of del became the same values as inputs.
		 */
		postcondition:
			let del:DeliveryMethod in
			del.oclIsNew() and
			del.Id = id and
			del.Name = name and
			DeliveryMethod.allInstance()->includes(del) and
			result = true
	}

	// entity query operation 
	Contract  ManageDeliveryMethodCRUDService::queryDeliveryMethod(id : Integer) : DeliveryMethod {

		/* definition: find specific DeliveryMethod instance by id */
		definition:
			deliverymethod:DeliveryMethod = DeliveryMethod.allInstance()->any(del:DeliveryMethod | del.Id = id)

		/* precondition: the instance deliverymethod was found in the system */
		precondition:
			deliverymethod.oclIsUndefined() = false

		/* postcondition: return found the instance deliverymethod */
		postcondition:
			result = deliverymethod
	}

	// entity modify operation 
	Contract  ManageDeliveryMethodCRUDService::modifyDeliveryMethod(id : Integer, name : String) : Boolean {

		/* definition: find specific DeliveryMethod instance by id */
		definition:
			deliverymethod:DeliveryMethod = DeliveryMethod.allInstance()->any(del:DeliveryMethod | del.Id = id)

		/* precondition: the instance deliverymethod was found in the system */
		precondition:
			deliverymethod.oclIsUndefined() = false

		/* postcondition: all properties of del became the same values as inputs. */
		postcondition:
			deliverymethod.Id = id and
			deliverymethod.Name = name and
			result = true
	}

	// entity delete operation 
	Contract  ManageDeliveryMethodCRUDService::deleteDeliveryMethod(id : Integer) : Boolean {

		/* definition: find specific DeliveryMethod instance by id */
		definition:
			deliverymethod:DeliveryMethod = DeliveryMethod.allInstance()->any(del:DeliveryMethod | del.Id = id)

		/* precondition: the instance deliverymethod was found in the system */
		precondition:
			deliverymethod.oclIsUndefined() = false and
			DeliveryMethod.allInstance()->includes(deliverymethod)

		/* postcondition: the instance deliverymethod was deleted from the system */
		postcondition:
			DeliveryMethod.allInstance()->excludes(deliverymethod) and
			result = true
	}

	Contract SalesManagementSystemSystem::manageItemsPrices() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract ManageClientCRUDService::createClientGroup() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract ManageClientCRUDService::queryClientGroup() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract ManageClientCRUDService::modifyClientGroup() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract ManageClientCRUDService::deleteClientGroup() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract TradingTerminationAndSettlementService::orderTerminationAndSettlement() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract TradingTerminationAndSettlementService::contractTerminationAndSettlement() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract TradingTerminationAndSettlementService::payment() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract TradingTerminationAndSettlementService::generateInvoice() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract DeliveryNotificationService::generateBillOfLading() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract DeliveryNotificationService::generateNotification() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract ExchangeProcessingService::typeChoice() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract ExchangeProcessingService::cancelOrder() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract ExchangeProcessingService::regenerateBillOfLading() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract ExchangeProcessingService::regenerateNotification() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract SalesPlanManagementService::makeNewPlan() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract SalesPlanManagementService::addItemIntoPlan() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

	Contract SalesPlanManagementService::generatePlan() : Boolean {

		precondition:
			true
		postcondition:
			result = true
	}

}

DomainModel SalesManagementSystem {

	@AutoCRUD Entity Contracts {
		Id : Integer
		Buyer : String
		Packing : String
		DateOfShipment : Date
		PortOfShipment : String
		PortOfDestination : String
		Insurance : String
		EffectiveDate : Date

		[Refer]
		ContractstoClient : Client ! Association
		BelongedOrder : Order Association
		InvoiceOfContract : Invoice Association
	}

	@AutoCRUD Entity Client {
		Id : Integer
		Name : String
		Address : String
		Contact : String
		PhoneNumber : String

		[Refer]
		CG : ClientGroup Association
		ContainedOrders : Order* ! Association
	}

	@AutoCRUD Entity Order {
		Id : Integer
		IsCompleted : Boolean
		PaymentInformation : String
		Amount : Real

		[Refer]
		BillOfLadingOfOrder : BillOfLading Association
		DN : DeliveryNotification Association
		EN : ExchangeNotification* Association
		OT  : OrderMethod Association
		Buyer : Client Association
		ContainedOrderLine : OrderLineProduct* Association
		ContractOfOrder : Contracts ! Association
	}

	@AutoCRUD Entity Invoice {
		Id : Integer
		Title : String
		EffecitveDate : Date
		Amount : Real
	}

	@AutoCRUD Entity BillOfLading {
		Id : Integer
		Consignee : String
		CommodityList : String
		TotalPrice : Real
		DeadlineForPerformance : String
		LocationForPerformance : String
		MethodForPerformance : String

		[Refer]
		DT : DeliveryMethod Association
		BelongedOrder : Order ! Association
	}

	Entity DeliveryNotification {
		Id : Integer
		EffectiveDate : Date
		Details : String
	}

	Entity ExchangeNotification {
		Id : Integer
		EffectiveDate : Date
		Details : String
	}

	@AutoCRUD Entity OrderMethod {
		Id : Integer
		Name : String
	}

	Entity ClientGroup {
		Id : Integer
		Name : String
	}

	@AutoCRUD Entity DeliveryMethod {
		Id : Integer
		Name : String
	}

	@AutoCRUD Entity Product {
		Id : Integer
		Name : String
		Price : Real
	}

	Entity OrderLineProduct {
		Id : Integer
		Quantity : Integer
		SubAmount : Real

		[Refer]
		BelongedProduct : Product Association
		BelongedOrder : Order ! Association
	}

	Entity PlanLineProduct {
		Cost : Real
		Id : Integer
		Expected : Integer
		SalesCommission : Real

		[Refer]
		BelongedProduct : Product Association
		ContainedLine : SalePlan Association
	}

	Entity SalePlan {
		StartDate : Date
		EndDate : Date
		Id : Integer
		TotalCost : Real
		TotalPrice : Real
		Profits : Real

		[Refer]
		SalePlantoPlanLineProduct : PlanLineProduct* ! Aggregation
	}

}

